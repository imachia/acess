version: '3.8'

services:
  access-control-app:
    image: node:18-alpine
    container_name: access-control-saas
    ports:
      - "5000:5000"
    environment:
      NODE_ENV: production
      DATABASE_URL: postgresql://postgres:929d54bc0ff22387163f04cfb3b3d0fa@148.230.78.128:5432/controle
      PGHOST: 148.230.78.128
      PGPORT: 5432
      PGUSER: postgres
      PGPASSWORD: 929d54bc0ff22387163f04cfb3b3d0fa
      PGDATABASE: controle
      S3_ACCESS_KEY: kEtCCAq0EAaQHJtPg8Mh
      S3_SECRET_KEY: tBQT17iRlqvJEYWXuIcS7Wl3g1jXsJreI31k2aTC
      S3_BUCKET: primus
      S3_ENDPOINT: s3.deliwise.com.br
      PORT: 5000
    working_dir: /app
    command: >
      sh -c "
      echo 'üöÄ Iniciando deploy da aplica√ß√£o Access Control SaaS...' &&
      apk add --no-cache npm git curl &&
      
      echo 'üì¶ Criando estrutura da aplica√ß√£o...' &&
      mkdir -p dist/public/assets &&
      
      echo 'üìù Criando package.json...' &&
      cat > package.json << 'EOF'
      {
        \"name\": \"access-control-saas\",
        \"version\": \"1.0.0\",
        \"type\": \"module\",
        \"dependencies\": {
          \"express\": \"^4.18.2\",
          \"pg\": \"^8.11.3\",
          \"@neondatabase/serverless\": \"^0.9.0\",
          \"drizzle-orm\": \"^0.28.6\",
          \"ws\": \"^8.14.2\",
          \"multer\": \"^1.4.5-lts.1\",
          \"minio\": \"^7.1.3\"
        }
      }
      EOF
      
      echo 'üì¶ Instalando depend√™ncias...' &&
      npm install &&
      
      echo 'üé® Criando frontend (index.html)...' &&
      cat > dist/public/index.html << 'EOF'
      <!DOCTYPE html>
      <html lang=\"pt-BR\">
      <head>
        <meta charset=\"UTF-8\">
        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">
        <title>Sistema de Controle de Acesso</title>
        <script src=\"https://unpkg.com/react@18/umd/react.production.min.js\"></script>
        <script src=\"https://unpkg.com/react-dom@18/umd/react-dom.production.min.js\"></script>
        <script src=\"https://cdn.tailwindcss.com\"></script>
        <style>
          body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; }
          .gradient-bg { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); }
          .card { background: rgba(255,255,255,0.95); backdrop-filter: blur(10px); border-radius: 12px; }
        </style>
      </head>
      <body class=\"bg-gray-50\">
        <div id=\"root\"></div>
        <script>
          const { useState, useEffect } = React;
          
          function Dashboard() {
            const [stats, setStats] = useState({ logs: 0, stores: 0, devices: 0, clients: 0 });
            const [logs, setLogs] = useState([]);
            
            useEffect(() => {
              fetch('/api/access-logs')
                .then(r => r.json())
                .then(data => {
                  setLogs(data.slice(0, 10));
                  setStats(prev => ({ ...prev, logs: data.length }));
                });
              
              ['stores', 'devices', 'clients'].forEach(endpoint => {
                fetch(\`/api/\${endpoint}\`)
                  .then(r => r.json())
                  .then(data => setStats(prev => ({ ...prev, [endpoint]: data.length })));
              });
            }, []);
            
            return React.createElement('div', { className: 'min-h-screen gradient-bg p-6' },
              React.createElement('div', { className: 'max-w-7xl mx-auto' },
                React.createElement('h1', { className: 'text-4xl font-bold text-white mb-8 text-center' }, 'Sistema de Controle de Acesso'),
                
                React.createElement('div', { className: 'grid grid-cols-1 md:grid-cols-4 gap-6 mb-8' },
                  [
                    { title: 'Total de Logs', value: stats.logs, color: 'bg-blue-500' },
                    { title: 'Lojas', value: stats.stores, color: 'bg-green-500' },
                    { title: 'Dispositivos', value: stats.devices, color: 'bg-purple-500' },
                    { title: 'Clientes', value: stats.clients, color: 'bg-orange-500' }
                  ].map(stat => 
                    React.createElement('div', { key: stat.title, className: 'card p-6 shadow-lg' },
                      React.createElement('h3', { className: 'text-gray-600 text-sm font-medium' }, stat.title),
                      React.createElement('p', { className: \`text-3xl font-bold \${stat.color.replace('bg-', 'text-')}\` }, stat.value)
                    )
                  )
                ),
                
                React.createElement('div', { className: 'card p-6 shadow-lg' },
                  React.createElement('h2', { className: 'text-2xl font-bold mb-4' }, 'Eventos Recentes'),
                  React.createElement('div', { className: 'space-y-3' },
                    logs.map((log, i) => 
                      React.createElement('div', { key: i, className: 'flex items-center justify-between p-3 bg-gray-50 rounded-lg' },
                        React.createElement('div', null,
                          React.createElement('p', { className: 'font-medium' }, log.userName || 'Usu√°rio'),
                          React.createElement('p', { className: 'text-sm text-gray-600' }, log.deviceName)
                        ),
                        React.createElement('span', { 
                          className: \`px-3 py-1 rounded-full text-sm \${log.action === 'Entrada' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800'}\`
                        }, log.action)
                      )
                    )
                  )
                )
              )
            );
          }
          
          ReactDOM.render(React.createElement(Dashboard), document.getElementById('root'));
        </script>
      </body>
      </html>
      EOF
      
      echo 'üîß Criando servidor backend...' &&
      cat > dist/index.js << 'EOF'
      import express from 'express';
      import { Pool } from 'pg';
      import path from 'path';
      import { fileURLToPath } from 'url';
      
      const __filename = fileURLToPath(import.meta.url);
      const __dirname = path.dirname(__filename);
      
      const app = express();
      const port = process.env.PORT || 5000;
      
      // PostgreSQL connection
      const pool = new Pool({
        connectionString: process.env.DATABASE_URL
      });
      
      app.use(express.json());
      app.use(express.static(path.join(__dirname, 'public')));
      
      // Health check
      app.get('/api/health', async (req, res) => {
        try {
          await pool.query('SELECT 1');
          res.json({ status: 'ok', database: 'connected', timestamp: new Date().toISOString() });
        } catch (error) {
          res.json({ status: 'error', database: 'disconnected', error: error.message });
        }
      });
      
      // Access logs
      app.get('/api/access-logs', async (req, res) => {
        try {
          const result = await pool.query(\`
            SELECT 
              al.id,
              al.action,
              al.timestamp,
              al.user_id as \"userId\",
              al.user_name as \"userName\",
              c.photo_url as \"userPhotoUrl\",
              al.device_id as \"deviceId\",
              d.name as \"deviceName\",
              d.type as \"deviceType\",
              d.location as \"deviceLocation\",
              s.name as \"storeName\"
            FROM access_logs al
            LEFT JOIN clients c ON al.user_id = c.id
            LEFT JOIN devices d ON al.device_id = d.id
            LEFT JOIN stores s ON d.store_id = s.id
            ORDER BY al.timestamp DESC
          \`);
          res.json(result.rows);
        } catch (error) {
          console.error('Erro ao buscar logs:', error);
          res.status(500).json({ error: 'Failed to fetch access logs' });
        }
      });
      
      // Stores
      app.get('/api/stores', async (req, res) => {
        try {
          const result = await pool.query('SELECT * FROM stores ORDER BY created_at DESC');
          res.json(result.rows);
        } catch (error) {
          res.status(500).json({ error: 'Failed to fetch stores' });
        }
      });
      
      // Devices
      app.get('/api/devices', async (req, res) => {
        try {
          const result = await pool.query('SELECT * FROM devices ORDER BY created_at DESC');
          res.json(result.rows);
        } catch (error) {
          res.status(500).json({ error: 'Failed to fetch devices' });
        }
      });
      
      // Clients
      app.get('/api/clients', async (req, res) => {
        try {
          const result = await pool.query('SELECT * FROM clients ORDER BY created_at DESC');
          res.json(result.rows);
        } catch (error) {
          res.status(500).json({ error: 'Failed to fetch clients' });
        }
      });
      
      // Serve React app for all other routes
      app.get('*', (req, res) => {
        res.sendFile(path.join(__dirname, 'public', 'index.html'));
      });
      
      app.listen(port, '0.0.0.0', () => {
        console.log(\`üöÄ Sistema de Controle de Acesso rodando na porta \${port}\`);
        console.log(\`üìä Dashboard: http://localhost:\${port}\`);
        console.log(\`üîç Health: http://localhost:\${port}/api/health\`);
      });
      EOF
      
      echo '‚úÖ Aplica√ß√£o criada com sucesso!' &&
      echo 'üöÄ Iniciando servidor...' &&
      node dist/index.js
      "
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - access-control-network

networks:
  access-control-network:
    driver: bridge