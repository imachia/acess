version: '3.8'

services:
  access-control-app:
    image: node:18-alpine
    ports:
      - "5000:5000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:929d54bc0ff22387163f04cfb3b3d0fa@148.230.78.128:5432/controle
      - PGHOST=148.230.78.128
      - PGPORT=5432
      - PGUSER=postgres
      - PGPASSWORD=929d54bc0ff22387163f04cfb3b3d0fa
      - PGDATABASE=controle
      - PORT=5000
    working_dir: /app
    command: |
      sh -c "
      echo 'Instalando Node.js e dependencias...' &&
      apk add --no-cache npm &&
      
      echo 'Criando aplicacao...' &&
      npm init -y &&
      npm install express@4.18.2 pg@8.11.3 --production &&
      
      echo 'Criando frontend...' &&
      mkdir -p public &&
      cat > public/index.html << 'HTML'
      <!DOCTYPE html>
      <html lang='pt-BR'>
      <head>
        <meta charset='UTF-8'>
        <meta name='viewport' content='width=device-width, initial-scale=1.0'>
        <title>Sistema de Controle de Acesso</title>
        <script src='https://unpkg.com/react@18/umd/react.production.min.js'></script>
        <script src='https://unpkg.com/react-dom@18/umd/react-dom.production.min.js'></script>
        <script src='https://cdn.tailwindcss.com'></script>
        <style>
          body { font-family: system-ui, sans-serif; margin: 0; }
          .gradient-bg { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); }
          .card { background: rgba(255,255,255,0.95); backdrop-filter: blur(10px); border-radius: 16px; box-shadow: 0 8px 32px rgba(0,0,0,0.1); }
          .bullet-item { background: white; border-radius: 12px; box-shadow: 0 2px 8px rgba(0,0,0,0.1); transition: transform 0.2s; }
          .bullet-item:hover { transform: translateY(-2px); }
          .stat-card { background: linear-gradient(135deg, var(--from), var(--to)); }
        </style>
      </head>
      <body>
        <div id='root'></div>
        <script>
          const { useState, useEffect } = React;
          
          function App() {
            const [data, setData] = useState({ logs: [], stats: { logs: 0, stores: 0, devices: 0, clients: 0 } });
            const [loading, setLoading] = useState(true);
            
            useEffect(() => {
              const fetchData = async () => {
                try {
                  const [logs, stores, devices, clients] = await Promise.all([
                    fetch('/api/access-logs').then(r => r.json()),
                    fetch('/api/stores').then(r => r.json()),
                    fetch('/api/devices').then(r => r.json()),
                    fetch('/api/clients').then(r => r.json())
                  ]);
                  
                  setData({
                    logs: logs.slice(0, 10),
                    stats: {
                      logs: logs.length,
                      stores: stores.length,
                      devices: devices.length,
                      clients: clients.length
                    }
                  });
                } catch (error) {
                  console.error('Erro:', error);
                } finally {
                  setLoading(false);
                }
              };
              
              fetchData();
            }, []);
            
            if (loading) {
              return React.createElement('div', { 
                className: 'min-h-screen gradient-bg flex items-center justify-center text-white text-xl' 
              }, 'Carregando sistema...');
            }
            
            const stats = [
              { title: 'Total de Logs', value: data.stats.logs, from: '#3B82F6', to: '#1D4ED8', icon: 'üìä' },
              { title: 'Lojas', value: data.stats.stores, from: '#10B981', to: '#059669', icon: 'üè™' },
              { title: 'Dispositivos', value: data.stats.devices, from: '#8B5CF6', to: '#7C3AED', icon: 'üì±' },
              { title: 'Clientes', value: data.stats.clients, from: '#F59E0B', to: '#D97706', icon: 'üë•' }
            ];
            
            return React.createElement('div', { className: 'min-h-screen gradient-bg' },
              React.createElement('div', { className: 'container mx-auto px-6 py-8' },
                // Header
                React.createElement('div', { className: 'text-center mb-12' },
                  React.createElement('h1', { className: 'text-5xl font-bold text-white mb-4' }, 'üîê Sistema de Controle de Acesso'),
                  React.createElement('p', { className: 'text-xl text-white opacity-80' }, 'Dashboard em tempo real')
                ),
                
                // Stats
                React.createElement('div', { className: 'grid grid-cols-1 md:grid-cols-4 gap-6 mb-12' },
                  stats.map((stat, i) => 
                    React.createElement('div', { 
                      key: i,
                      className: 'stat-card p-6 rounded-2xl text-white shadow-lg',
                      style: { '--from': stat.from, '--to': stat.to }
                    },
                      React.createElement('div', { className: 'flex items-center justify-between' },
                        React.createElement('div', null,
                          React.createElement('p', { className: 'text-sm opacity-80' }, stat.title),
                          React.createElement('p', { className: 'text-3xl font-bold mt-1' }, stat.value)
                        ),
                        React.createElement('div', { className: 'text-4xl opacity-80' }, stat.icon)
                      )
                    )
                  )
                ),
                
                // Recent Events
                React.createElement('div', { className: 'card p-8' },
                  React.createElement('h2', { className: 'text-3xl font-bold text-gray-800 mb-6' }, 'üìã Eventos Recentes'),
                  React.createElement('div', { className: 'space-y-4' },
                    data.logs.map((log, i) => 
                      React.createElement('div', { key: i, className: 'bullet-item p-4 flex items-center justify-between' },
                        React.createElement('div', { className: 'flex items-center space-x-4' },
                          React.createElement('div', { 
                            className: 'w-3 h-3 rounded-full ' + (log.action === 'Entrada' ? 'bg-green-500' : 'bg-red-500') 
                          }),
                          React.createElement('div', null,
                            React.createElement('p', { className: 'font-semibold text-gray-800' }, log.user_name || 'Usu√°rio'),
                            React.createElement('p', { className: 'text-sm text-gray-600' }, log.device_name || 'Dispositivo'),
                            React.createElement('p', { className: 'text-xs text-gray-500' }, 
                              new Date(log.timestamp).toLocaleString('pt-BR')
                            )
                          )
                        ),
                        React.createElement('span', { 
                          className: 'px-4 py-2 rounded-full text-sm font-medium ' + 
                          (log.action === 'Entrada' ? 'bg-green-100 text-green-800' : 'bg-red-100 text-red-800')
                        }, log.action)
                      )
                    )
                  )
                ),
                
                React.createElement('div', { className: 'text-center mt-12' },
                  React.createElement('p', { className: 'text-white opacity-60' }, 
                    'Sistema conectado ao PostgreSQL externo'
                  )
                )
              )
            );
          }
          
          ReactDOM.render(React.createElement(App), document.getElementById('root'));
        </script>
      </body>
      </html>
      HTML
      
      echo 'Criando servidor...' &&
      cat > server.js << 'JS'
      const express = require('express');
      const { Pool } = require('pg');
      const app = express();
      const port = 5000;
      
      const pool = new Pool({
        connectionString: process.env.DATABASE_URL
      });
      
      app.use(express.static('public'));
      
      app.get('/api/health', async (req, res) => {
        try {
          const result = await pool.query('SELECT NOW()');
          res.json({ status: 'ok', database: 'connected', time: result.rows[0].now });
        } catch (error) {
          res.status(500).json({ status: 'error', error: error.message });
        }
      });
      
      app.get('/api/access-logs', async (req, res) => {
        try {
          const result = await pool.query('SELECT * FROM access_logs WHERE user_name IS NOT NULL ORDER BY timestamp DESC LIMIT 100');
          res.json(result.rows);
        } catch (error) {
          res.status(500).json({ error: error.message });
        }
      });
      
      app.get('/api/stores', async (req, res) => {
        try {
          const result = await pool.query('SELECT * FROM stores');
          res.json(result.rows);
        } catch (error) {
          res.status(500).json({ error: error.message });
        }
      });
      
      app.get('/api/devices', async (req, res) => {
        try {
          const result = await pool.query('SELECT * FROM devices');
          res.json(result.rows);
        } catch (error) {
          res.status(500).json({ error: error.message });
        }
      });
      
      app.get('/api/clients', async (req, res) => {
        try {
          const result = await pool.query('SELECT * FROM clients');
          res.json(result.rows);
        } catch (error) {
          res.status(500).json({ error: error.message });
        }
      });
      
      app.listen(port, '0.0.0.0', () => {
        console.log('Sistema rodando na porta ' + port);
      });
      JS
      
      echo 'Iniciando servidor...' &&
      node server.js
      "
    deploy:
      replicas: 1
    networks:
      - default

networks:
  default:
    driver: overlay