version: '3.8'

services:
  access-control-app:
    image: node:18-alpine
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:929d54bc0ff22387163f04cfb3b3d0fa@148.230.78.128:5432/controle
      - PGHOST=148.230.78.128
      - PGPORT=5432
      - PGUSER=postgres
      - PGPASSWORD=929d54bc0ff22387163f04cfb3b3d0fa
      - PGDATABASE=controle
      - PORT=5000
    working_dir: /app
    command: |
      sh -c "
      echo 'Instalando dependências...' &&
      apk add --no-cache npm &&
      npm init -y &&
      npm install express pg &&
      echo 'Criando servidor Express...' &&
      cat > index.js << 'EOF'
      const express = require('express');
      const { Pool } = require('pg');
      const app = express();
      const port = process.env.PORT || 5000;
      
      console.log('Conectando ao PostgreSQL externo...');
      const pool = new Pool({
        connectionString: process.env.DATABASE_URL,
        ssl: false
      });
      
      app.use(express.json());
      
      app.get('/', (req, res) => {
        res.send(`
          <h1>Sistema de Controle de Acesso</h1>
          <p>Status: Funcionando!</p>
          <p>Banco: PostgreSQL Externo</p>
          <p><a href='/api/health'>Health Check</a></p>
          <p><a href='/api/access-logs'>Access Logs</a></p>
          <p><a href='/api/stores'>Stores</a></p>
        `);
      });
      
      app.get('/api/health', async (req, res) => {
        try {
          const result = await pool.query('SELECT NOW()');
          res.json({ 
            status: 'ok', 
            database: 'connected',
            timestamp: result.rows[0].now,
            host: process.env.PGHOST
          });
        } catch (error) {
          console.error('Database error:', error);
          res.status(500).json({ 
            status: 'error', 
            database: 'disconnected',
            error: error.message 
          });
        }
      });
      
      app.get('/api/access-logs', async (req, res) => {
        try {
          const result = await pool.query(`
            SELECT 
              id, action, timestamp, user_name, device_name 
            FROM access_logs 
            ORDER BY timestamp DESC 
            LIMIT 50
          `);
          res.json({
            total: result.rows.length,
            logs: result.rows
          });
        } catch (error) {
          console.error('Logs error:', error);
          res.status(500).json({ error: 'Failed to fetch access logs' });
        }
      });
      
      app.get('/api/stores', async (req, res) => {
        try {
          const result = await pool.query('SELECT * FROM stores ORDER BY name');
          res.json(result.rows);
        } catch (error) {
          console.error('Stores error:', error);
          res.status(500).json({ error: 'Failed to fetch stores' });
        }
      });
      
      app.get('/api/devices', async (req, res) => {
        try {
          const result = await pool.query('SELECT * FROM devices ORDER BY name');
          res.json(result.rows);
        } catch (error) {
          console.error('Devices error:', error);
          res.status(500).json({ error: 'Failed to fetch devices' });
        }
      });
      
      app.listen(port, '0.0.0.0', () => {
        console.log('Sistema de Controle de Acesso rodando na porta ' + port);
        console.log('PostgreSQL Host: ' + process.env.PGHOST);
      });
      EOF
      echo 'Iniciando aplicação...' &&
      node index.js
      "
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    networks:
      - default

networks:
  default:
    driver: overlay
    attachable: true
